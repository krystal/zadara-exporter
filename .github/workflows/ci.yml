---
    name: CI
    on: [push]
    
    jobs:
      release-please:
        name: Release Please
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        outputs:
          release_created: ${{ steps.release-please.outputs.release_created }}
          tag_name: ${{ steps.release-please.outputs.tag_name }}
          version: ${{ steps.release-please.outputs.version }}
        steps:
          - uses: krystal/release-please-manifest-action@v1
            id: release-please
            with:
              app-id: ${{ vars.RELEASE_PLEASE_GITHUB_APP_ID }}
              private-key: ${{ secrets.RELEASE_PLEASE_GITHUB_APP_PRIVATE_KEY }} 

      lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - uses: actions/setup-go@v5
            with:
              go-version: "1.22"
          - name: golangci-lint
            uses: golangci/golangci-lint-action@v6
            with:
              version: v1.58
              args: --timeout=10m
            env:
              VERBOSE: "true"
    
      tidy:
        name: Tidy
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - uses: actions/setup-go@v5
            with:
              go-version: "1.22"
          - name: Check if mods are tidy
            run: make check-tidy
    
      test:
        name: Test
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - uses: actions/setup-go@v5
            with:
              go-version: "1.22"
          - name: Run tests
            run: make test
            env:
              TESTARGS: "-covermode=atomic -coverprofile=./coverage.out"
          - run: go tool cover -html=coverage.out -o=coverage.html
          - name: Upload coverage report to artifacts
            uses: actions/upload-artifact@v2
            with:
              name: coverage-report
              path: |
                coverage.out
                coverage.html
              if-no-files-found: error

      publish-image:
        name: Build and Publish
        runs-on: ubuntu-latest
        needs: [lint, test, tidy, release-please]
        if: needs.release-please.outputs.release_created
        steps:
          - uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - run: git fetch --force --tags
          - name: Set up QEMU
            uses: docker/setup-qemu-action@v3
          - uses: docker/setup-buildx-action@v3
          - uses: docker/login-action@v2
            with:
              registry: ${{ vars.KRYSTAL_REGISTRY_HOST }}
              username: ${{ vars.KRYSTAL_REGISTRY_USERNAME }}
              password: ${{ secrets.KRYSTAL_REGISTRY_PASSWORD }}
          - uses: actions/setup-go@v5
            with:
              go-version: "1.22"
          - name: Run GoReleaser
            uses: goreleaser/goreleaser-action@v5
            with:
              version: latest
              # Skip announce and publish, release please will already have handled
              # that. We just want to build the binaries for use in the docker build
              # step.
              args: release --clean --skip=announce,publish
            env:
              REGISTRY: ghcr.io
              IMAGE_NAME: ${{ github.repository }}
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      publish-chart:
        name: Publish Helm Chart
        needs: [release-please, publish-image]
        runs-on: ubuntu-latest
        steps:
          - uses: azure/setup-helm@v3
            with:
              version: "latest"
              token: ${{ secrets.GITHUB_TOKEN }}
          - run: |
              helm registry login '${{ vars.KRYSTAL_REGISTRY_HOST }}' \
                --username '${{ vars.KRYSTAL_REGISTRY_USERNAME }}' \
                --password '${{ secrets.KRYSTAL_REGISTRY_PASSWORD }}'
          - uses: actions/checkout@v3
          - run: |
              helm package ./chart/
              helm push zadara-exporter-*.tgz \
                'oci://${{ vars.KRYSTAL_REGISTRY_HOST }}/kubernetes/charts'